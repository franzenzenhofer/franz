// Generated by CoffeeScript 1.3.1
(function() {
  var FALSE, Franz, TRUE, cbr, dlog, fff, fffr, ifw, isFunction, mF, nb, _DEBUG_,
    __slice = [].slice;

  Franz = {};

  window.Franz = Franz;

  Franz._DEBUG_ = _DEBUG_ = true;

  TRUE = true;

  FALSE = false;

  dlog = function(msg) {
    if (_DEBUG_) {
      return console.log(msg);
    }
  };

  cbr = function(cb, function_name) {
    var _results;
    _results = [];
    while (!cb) {
      throw new Error('Callback required for ' + function_name);
    }
    return _results;
  };

  isFunction = function(functionToCheck) {
    var getType;
    getType = [];
    return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
  };

  nb = function() {
    var cb, p;
    cb = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (cb && isFunction(cb)) {
      window.setTimeout.apply(window, [cb, 0].concat(__slice.call(p)));
    }
    return p != null ? p[0] : void 0;
  };

  fff = function() {
    var d, defaults, first_func, i, p2, par, params, _fn, _fn1, _i, _j, _len, _len1;
    params = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    first_func = null;
    p2 = [];
    i = 0;
    _fn = function(par) {
      if (isFunction(par) && !first_func) {
        return first_func = par;
      } else {
        return p2.push(par);
      }
    };
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      par = params[_i];
      _fn(par);
    }
    _fn1 = function(d) {
      var _ref;
      return (_ref = p2[i]) != null ? _ref : p2[i] = d;
    };
    for (i = _j = 0, _len1 = defaults.length; _j < _len1; i = ++_j) {
      d = defaults[i];
      _fn1(d);
    }
    if (!first_func) {
      first_func = function(c) {
        return null;
      };
    }
    p2.unshift(first_func);
    return p2;
  };

  fffr = function() {
    var d, defaults, first_func, i, p2, par, params, _fn, _fn1, _i, _j, _len, _len1;
    params = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    first_func = null;
    p2 = [];
    i = 0;
    _fn = function(par) {
      if (isFunction(par) && !first_func) {
        return first_func = par;
      } else {
        return p2.push(par);
      }
    };
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      par = params[_i];
      _fn(par);
    }
    _fn1 = function(d) {
      var _ref;
      return (_ref = p2[i]) != null ? _ref : p2[i] = d;
    };
    for (i = _j = 0, _len1 = defaults.length; _j < _len1; i = ++_j) {
      d = defaults[i];
      _fn1(d);
    }
    if (!first_func) {
      first_func = false;
    }
    p2.unshift(first_func);
    return p2;
  };

  ifw = function() {
    var c, cb, ctx, image_filters_func, imgd, new_c, new_ctx, new_imgd, new_px, p, px, _ref, _ref1;
    c = arguments[0], cb = arguments[1], image_filters_func = arguments[2], p = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    _ref1 = newToolbox(c), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_px = _ref1[3];
    nb(function() {
      return new_ctx.putImageData(image_filters_func.apply(null, [imgd].concat(__slice.call(p))), 0, 0);
    });
    return nb(cb, new_c);
  };

  mF = function() {
    var defaults, image_filters_func;
    image_filters_func = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var c, cb, defaulted_p, p;
      c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      defaulted_p = fff(p, defaults);
      cb = defaulted_p.shift();
      return ifw.apply(null, [c, cb, image_filters_func].concat(__slice.call(defaulted_p)));
    };
  };

}).call(this);
