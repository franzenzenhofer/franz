// Generated by CoffeeScript 1.3.1
(function() {
  var __slice = [].slice;

  Franz.vignette = function() {
    var black, c, cb, gradient, new_c, new_ctx, new_imgd, new_pxs, outerRadius, p, white, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0.2, 0.8), cb = _ref[0], white = _ref[1], black = _ref[2];
    _ref1 = getToolbox(copy(c)), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_pxs = _ref1[3];
    outerRadius = Math.sqrt(Math.pow(new_c.width / 2, 2) + Math.pow(new_c.height / 2, 2));
    new_ctx.globalCompositeOperation = 'source-over';
    gradient = new_ctx.createRadialGradient(new_c.width / 2, new_c.height / 2, 0, new_c.width / 2, new_c.height / 2, outerRadius);
    gradient.addColorStop(0, 'rgba(0,0,0,0)');
    gradient.addColorStop(0.65, 'rgba(0,0,0,0)');
    gradient.addColorStop(1, 'rgba(0,0,0,' + black + ')');
    new_ctx.fillStyle = gradient;
    new_ctx.fillRect(0, 0, new_c.width, new_c.height);
    new_ctx.globalCompositeOperation = 'lighter';
    gradient = new_ctx.createRadialGradient(new_c.width / 2, new_c.height / 2, 0, new_c.width / 2, new_c.height / 2, outerRadius);
    gradient.addColorStop(0, 'rgba(255,255,255,' + white + ')');
    gradient.addColorStop(0.65, 'rgba(255,255,255,0)');
    gradient.addColorStop(1, 'rgba(0,0,0,0)');
    new_ctx.fillStyle = gradient;
    new_ctx.fillRect(0, 0, new_c.width, new_c.height);
    return nb(cb, new_c);
  };

  Franz.schemer = function() {
    var aA, aV, bA, bV, c, cb, compare, filter, gA, gV, p, rA, rV, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    dlog(fff(p, 1, 2, 3, 4, 5, 6, 7, 8, [], []));
    _ref = fff(p, [], [], [], [], [], [], [], []), cb = _ref[0], rA = _ref[1], gA = _ref[2], bA = _ref[3], aA = _ref[4], rV = _ref[5], gV = _ref[6], bV = _ref[7], aV = _ref[8];
    compare = function(a, b) {
      return a - b;
    };
    rA = rA.sort(compare);
    dlog(rA);
    gA = gA.sort(compare);
    bA = bA.sort(compare);
    aA = aA.sort(compare);
    filter = function(r, g, b, a) {
      var a2, a_threshold, b2, b_threshold, g2, g_threshold, i, r2, r_threshold, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4, _ref5;
      _ref1 = [r, g, b, a], r2 = _ref1[0], g2 = _ref1[1], b2 = _ref1[2], a2 = _ref1[3];
      if (rA.length > 0) {
        for (i = _i = 0, _len = rA.length; _i < _len; i = ++_i) {
          r_threshold = rA[i];
          if (r <= r_threshold) {
            r2 = (_ref2 = rV[i]) != null ? _ref2 : r_threshold;
            break;
          }
        }
      }
      if (gA.length > 0) {
        for (i = _j = 0, _len1 = gA.length; _j < _len1; i = ++_j) {
          g_threshold = gA[i];
          if (g <= g_threshold) {
            g2 = (_ref3 = gV[i]) != null ? _ref3 : g_threshold;
            break;
          }
        }
      }
      if (bA.length > 0) {
        for (i = _k = 0, _len2 = bA.length; _k < _len2; i = ++_k) {
          b_threshold = bA[i];
          if (b <= b_threshold) {
            b2 = (_ref4 = bV[i]) != null ? _ref4 : b_threshold;
            break;
          }
        }
      }
      if (aA.length > 0) {
        for (i = _l = 0, _len3 = aA.length; _l < _len3; i = ++_l) {
          a_threshold = aA[i];
          if (a <= a_threshold) {
            a2 = (_ref5 = aV[i]) != null ? _ref5 : a_threshold;
            break;
          }
        }
      }
      return [clamp(r2), clamp(g2), clamp(b2), clamp(a2)];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.reduceAndReplace = function() {
    var c, cb, defaults, filter, nr_of_buckets, p, replacementA, sorted_replacementA, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    defaults = {};
    defaults.c64 = [[0, 0, 0], [255, 255, 255], [116, 67, 53], [124, 172, 186], [123, 72, 144], [100, 151, 79], [64, 50, 133], [191, 205, 122], [123, 91, 47], [79, 69, 0], [163, 114, 101], [80, 80, 80], [120, 120, 120], [164, 215, 142], [120, 106, 189], [159, 159, 159]];
    _ref = fff(p, defaults.c64), cb = _ref[0], replacementA = _ref[1];
    if (!Array.isArray(replacementA)) {
      replacementA = defaults[replacementA];
    }
    nr_of_buckets = replacementA.length;
    dlog(replacementA);
    sorted_replacementA = replacementA.sort(function(a, b) {
      return ((3 * a[0] + 4 * a[1] + a[2]) >>> 3) - ((3 * b[0] + 4 * b[1] + b[2]) >>> 3);
    });
    dlog(sorted_replacementA);
    filter = function(r, g, b, a) {
      var b2, brightness, bucket_nr, g2, r2, _ref1;
      brightness = (3 * r + 4 * g + b) >>> 3;
      bucket_nr = Math.floor(brightness / 256 * nr_of_buckets);
      _ref1 = sorted_replacementA[bucket_nr], r2 = _ref1[0], g2 = _ref1[1], b2 = _ref1[2];
      return [r2, g2, b2, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.ascii = function() {
    var ascii_string, c, cb, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return _ref = fff(p, '@GLftli;:,.  '), cb = _ref[0], ascii_string = _ref[1], _ref;
  };

  Franz.removeNoise = function() {
    var a, b, b1, b2, b3, c, cb, ctx, g, g1, g2, g3, h, i, iNext, iPrev, imgd, maxB, maxG, maxR, minB, minG, minR, new_c, nextX, nextY, p, prevX, prevY, pxs, r, r1, r2, r3, u8, w, x, y, yw, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    cb = fff(p)[0];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], pxs = _ref[3];
    _ref1 = [c.width, c.height], w = _ref1[0], h = _ref1[1];
    u8 = new Uint8Array(new ArrayBuffer(pxs.length));
    y = 0;
    while (y < h) {
      nextY = (y === h ? y : y + 1);
      prevY = (y === 0 ? 0 : y - 1);
      x = 0;
      yw = y * w;
      while (x < w) {
        i = (yw + x) * 4;
        nextX = (x === w ? x : x + 1);
        prevX = (x === 0 ? 0 : x - 1);
        iNext = (nextY * w + nextX) * 4;
        iPrev = (prevY * w + nextX) * 4;
        r = i;
        g = i + 1;
        b = i + 2;
        a = i + 3;
        minR = maxR = pxs[iPrev];
        r1 = pxs[r - 4];
        r2 = pxs[r + 4];
        r3 = pxs[iNext];
        if (r1 < minR) {
          minR = r1;
        }
        if (r2 < minR) {
          minR = r2;
        }
        if (r3 < minR) {
          minR = r3;
        }
        if (r1 > maxR) {
          maxR = r1;
        }
        if (r2 > maxR) {
          maxR = r2;
        }
        if (r3 > maxR) {
          maxR = r3;
        }
        minG = maxG = pxs[iPrev + 1];
        g1 = pxs[g - 4];
        g2 = pxs[g + 4];
        g3 = pxs[iNext + 1];
        if (g1 < minG) {
          minG = g1;
        }
        if (g2 < minG) {
          minG = g2;
        }
        if (g3 < minG) {
          minG = g3;
        }
        if (g1 > maxG) {
          maxG = g1;
        }
        if (g2 > maxG) {
          maxG = g2;
        }
        if (g3 > maxG) {
          maxG = g3;
        }
        minB = maxB = pxs[iPrev + 2];
        b1 = pxs[b - 4];
        b2 = pxs[b + 4];
        b3 = pxs[iNext + 2];
        if (b1 < minB) {
          minB = b1;
        }
        if (b2 < minB) {
          minB = b2;
        }
        if (b3 < minB) {
          minB = b3;
        }
        if (b1 > maxB) {
          maxB = b1;
        }
        if (b2 > maxB) {
          maxB = b2;
        }
        if (b3 > maxB) {
          maxB = b3;
        }
        if (r > maxR) {
          u8[r] = maxR;
        } else if (r < minR) {
          u8[r] = minR;
        }
        if (g > maxG) {
          u8[g] = maxG;
        } else if (g < minG) {
          u8[g] = minG;
        }
        if (b > maxB) {
          u8[b] = maxB;
        } else if (b < minB) {
          u8[b] = minB;
        }
        u8[a] = pxs[a];
        x = x + 1;
      }
      y = y + 1;
    }
    new_c = Franz.byArray(u8, w, h);
    return nb(cb, new_c);
  };

  Franz.curve = function() {
    var b_c, bc, c, cb, filter, g_c, gc, p, r_c, rc, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    rc = [0, 0, 0, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 18, 19, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 52, 54, 55, 57, 59, 60, 62, 65, 67, 69, 70, 72, 74, 77, 79, 81, 83, 86, 88, 90, 92, 94, 97, 99, 101, 103, 107, 109, 111, 112, 116, 118, 120, 124, 126, 127, 129, 133, 135, 136, 140, 142, 143, 145, 149, 150, 152, 155, 157, 159, 162, 163, 165, 167, 170, 171, 173, 176, 177, 178, 180, 183, 184, 185, 188, 189, 190, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 219, 220, 221, 222, 223, 224, 225, 226, 227, 227, 228, 229, 229, 230, 231, 232, 232, 233, 234, 234, 235, 236, 236, 237, 238, 238, 239, 239, 240, 241, 241, 242, 242, 243, 244, 244, 245, 245, 245, 246, 247, 247, 248, 248, 249, 249, 249, 250, 251, 251, 252, 252, 252, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255];
    gc = [0, 0, 1, 2, 2, 3, 5, 5, 6, 7, 8, 8, 10, 11, 11, 12, 13, 15, 15, 16, 17, 18, 18, 19, 21, 22, 22, 23, 24, 26, 26, 27, 28, 29, 31, 31, 32, 33, 34, 35, 35, 37, 38, 39, 40, 41, 43, 44, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 186, 187, 188, 189, 190, 192, 193, 194, 195, 195, 196, 197, 199, 200, 201, 202, 202, 203, 204, 205, 206, 207, 208, 208, 209, 210, 211, 212, 213, 214, 214, 215, 216, 217, 218, 219, 219, 220, 221, 222, 223, 223, 224, 225, 226, 226, 227, 228, 228, 229, 230, 231, 232, 232, 232, 233, 234, 235, 235, 236, 236, 237, 238, 238, 239, 239, 240, 240, 241, 242, 242, 242, 243, 244, 245, 245, 246, 246, 247, 247, 248, 249, 249, 249, 250, 251, 251, 252, 252, 252, 253, 254, 255];
    bc = [53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 61, 61, 61, 62, 62, 63, 63, 63, 64, 65, 65, 65, 66, 66, 67, 67, 67, 68, 69, 69, 69, 70, 70, 71, 71, 72, 73, 73, 73, 74, 74, 75, 75, 76, 77, 77, 78, 78, 79, 79, 80, 81, 81, 82, 82, 83, 83, 84, 85, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 91, 93, 93, 94, 94, 95, 95, 96, 97, 98, 98, 99, 99, 100, 101, 102, 102, 103, 104, 105, 105, 106, 106, 107, 108, 109, 109, 110, 111, 111, 112, 113, 114, 114, 115, 116, 117, 117, 118, 119, 119, 121, 121, 122, 122, 123, 124, 125, 126, 126, 127, 128, 129, 129, 130, 131, 132, 132, 133, 134, 134, 135, 136, 137, 137, 138, 139, 140, 140, 141, 142, 142, 143, 144, 145, 145, 146, 146, 148, 148, 149, 149, 150, 151, 152, 152, 153, 153, 154, 155, 156, 156, 157, 157, 158, 159, 160, 160, 161, 161, 162, 162, 163, 164, 164, 165, 165, 166, 166, 167, 168, 168, 169, 169, 170, 170, 171, 172, 172, 173, 173, 174, 174, 175, 176, 176, 177, 177, 177, 178, 178, 179, 180, 180, 181, 181, 181, 182, 182, 183, 184, 184, 184, 185, 185, 186, 186, 186, 187, 188, 188, 188, 189, 189, 189, 190, 190, 191, 191, 192, 192, 193, 193, 193, 194, 194, 194, 195, 196, 196, 196, 197, 197, 197, 198, 199];
    _ref = fff(p, rc, gc, bc), cb = _ref[0], r_c = _ref[1], g_c = _ref[2], b_c = _ref[3];
    filter = function(r, g, b, a) {
      return [r_c[r], g_c[g], b_c[b], a];
    };
    return Franz.rgba(c, cb, filter);
  };

}).call(this);
