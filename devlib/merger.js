// Generated by CoffeeScript 1.3.1
(function() {
  var __slice = [].slice;

  Franz.merge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var blue, green, red;
      red = clamp((r * p_pxs[i]) / 255);
      green = clamp((g * p_pxs[i + 1]) / 255);
      blue = clamp((b * p_pxs[i + 2]) / 255);
      return [red, green, blue, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.hardmerge = function() {
    var alpha, c, cb, mode, new_c, new_ctx, new_imgd, new_pxs, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1, _ref2;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null, 'source-over', 1), cb = _ref[0], picture = _ref[1], alpha = _ref[2], mode = _ref[3];
    _ref1 = Franz.getToolbox(copy(c)), new_c = _ref1[0], new_ctx = _ref1[1], new_imgd = _ref1[2], new_pxs = _ref1[3];
    _ref2 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref2[0], p_ctx = _ref2[1], p_imgd = _ref2[2], p_pxs = _ref2[3];
    new_ctx.globalCompositeOperation = mode;
    new_ctx.drawImage(p_c, 0, 0);
    return nb(cb, new_c);
  };

  Franz.negmerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var blue, green, red;
      red = clamp((r / p_pxs[i]) * 255);
      green = clamp((g / p_pxs[i + 1]) * 255);
      blue = clamp((b / p_pxs[i + 2]) * 255);
      return [red, green, blue, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.lightmerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      r = (r > p_pxs[i] ? r : p_pxs[i]);
      g = (g > p_pxs[i + 1] ? g : p_pxs[i + 1]);
      b = (b > p_pxs[i + 2] ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.darkmerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      r = (r < p_pxs[i] ? r : p_pxs[i]);
      g = (g < p_pxs[i + 1] ? g : p_pxs[i + 1]);
      b = (b < p_pxs[i + 2] ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.lightermerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var lighter;
      lighter = (getGrayscaleValue(r, g, b) > getGrayscaleValue(p_pxs[i], p_pxs[i + 1], p_pxs[i + 2]) ? true : false);
      r = (lighter ? r : p_pxs[i]);
      g = (lighter ? g : p_pxs[i + 1]);
      b = (lighter ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.darkermerge = function() {
    var c, cb, filter, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null), cb = _ref[0], picture = _ref[1];
    while (!picture) {
      return false;
    }
    _ref1 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    filter = function(r, g, b, a, i) {
      var darker;
      darker = (getGrayscaleValue(r, g, b) < getGrayscaleValue(p_pxs[i], p_pxs[i + 1], p_pxs[i + 2]) ? true : false);
      r = (darker ? r : p_pxs[i]);
      g = (darker ? g : p_pxs[i + 1]);
      b = (darker ? b : p_pxs[i + 2]);
      return [r, g, b, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.blend = function() {
    var amount, c, cb, filter, neg_amount, p, p_c, p_ctx, p_imgd, p_pxs, picture, _ref, _ref1;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null, 0.5), cb = _ref[0], picture = _ref[1], amount = _ref[2];
    while (!picture) {
      return false;
    }
    _ref1 = Franz.getToolbox(Franz.hardResize(picture, c.width, c.height)), p_c = _ref1[0], p_ctx = _ref1[1], p_imgd = _ref1[2], p_pxs = _ref1[3];
    neg_amount = 1 - amount;
    filter = function(r, g, b, a, i) {
      var blue, green, red;
      red = clamp((r * neg_amount) + (p_pxs[i] * amount));
      green = clamp((g * neg_amount) + (p_pxs[i + 1] * amount));
      blue = clamp((b * neg_amount) + (p_pxs[i + 2] * amount));
      return [red, green, blue, a];
    };
    return Franz.rgba(c, cb, filter);
  };

  Franz.viewfinder = function() {
    var c, cb, p, pic, src, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fffr(p, './img/viewfinder.png'), cb = _ref[0], src = _ref[1];
    cbr(cb, 'Franz.viewfinder');
    pic = new Image();
    pic.onload = function() {
      return Franz.merge(c, pic, cb);
    };
    pic.src = src;
    return true;
  };

  Franz.oldschool = function() {
    var c, cb, p, pic, src, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fffr(p, './img/oldschool.png'), cb = _ref[0], src = _ref[1];
    cbr(cb, 'Franz.oldschool');
    pic = new Image();
    pic.onload = function() {
      return Franz.lightermerge(c, pic, cb);
    };
    pic.src = src;
    return true;
  };

}).call(this);
