// Generated by CoffeeScript 1.3.1
(function() {
  var byArray, byImage, clamp, copy, getGrayscaleValue, getToolbox, make, newToolbox, rgba, toArray, toImage,
    __slice = [].slice;

  Franz.clamp = clamp = function(v, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 255;
    }
    return Math.min(max, Math.max(min, v));
  };

  Franz.getToolbox = getToolbox = function(c, cb) {
    var ctx, img_data;
    return nb(cb, [c, ctx = c.getContext('2d'), img_data = ctx.getImageData(0, 0, c.width, c.height), img_data.data]);
  };

  Franz.make = make = function() {
    var c, cb, element, height, origin, p, width, _ref;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ref = fff(p, 800, 600), cb = _ref[0], width = _ref[1], height = _ref[2], origin = _ref[3];
    if (width.width && width.height) {
      element = width;
      width = element.width;
      height = element.height;
      origin = (element != null ? typeof element.getAttribute === "function" ? element.getAttribute('id') : void 0 : void 0) || (element != null ? typeof element.getAttribute === "function" ? element.getAttribute('origin') : void 0 : void 0);
    }
    c = document.createElement('canvas');
    c.width = width;
    c.height = height;
    if (origin) {
      c.setAttribute('origin', origin);
    }
    return nb(cb, c);
  };

  Franz.newToolbox = newToolbox = function() {
    var cb, height, origin, p, width, _ref;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ref = fff(p), cb = _ref[0], width = _ref[1], height = _ref[2], origin = _ref[3];
    return Franz.getToolbox(make(width, height, origin), cb);
  };

  Franz.copy = copy = function(c, cb) {
    var new_c, new_ctx, _ref;
    _ref = Franz.newToolbox(c), new_c = _ref[0], new_ctx = _ref[1];
    new_ctx.drawImage(c, 0, 0, c.width, c.height);
    return nb(cb, new_c);
  };

  Franz.byImage = byImage = function(img, cb) {
    if (img.width && img.height) {
      return copy(img, cb);
    } else {
      cbr(cb, 'Franz.byImage (only if the image is not "loaded")');
      if (isFunction(cb)) {
        img.onload = function() {
          return Franz.byImage(img, cb);
        };
      }
      return true;
    }
  };

  Franz.byArray = byArray = function(a, w, h, cb) {
    var c, ctx, i, imgd, pxs, _ref;
    _ref = newToolbox(w, h), c = _ref[0], ctx = _ref[1], imgd = _ref[2], pxs = _ref[3];
    i = 0;
    while (i < pxs.length) {
      pxs[i] = a[i];
      i = i + 1;
    }
    ctx.putImageData(imgd, 0, 0);
    return nb(cb, c);
  };

  Franz.toImage = toImage = function() {
    var c, cb, img, mime, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 'image/png'), cb = _ref[0], mime = _ref[1];
    img = new Image();
    img.src = c.toDataURL(mime, "");
    return nb(cb, img);
  };

  Franz.toArray = toArray = function(c, cb) {
    var a, ctx, i, imgd, px, _ref;
    a = [];
    _ref = getToolbox(c), c = _ref[0], ctx = _ref[1], imgd = _ref[2], px = _ref[3];
    if (Uint8Array) {
      a = new Uint8Array(new ArrayBuffer(px.length));
    }
    i = 0;
    while (i < px.length) {
      a[i] = px[i];
      i = i + 1;
    }
    return a;
  };

  Franz.rgba = rgba = function() {
    var a, b, c, cb, ctx, extended, filter, g, h, i, imgd, new_c, p, pxs, r, u8, w, x, y, yw, _ref, _ref1, _ref2, _ref3, _ref4;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, null, false), cb = _ref[0], filter = _ref[1], extended = _ref[2];
    if (!isFunction(filter)) {
      return false;
    }
    _ref1 = getToolbox(c), c = _ref1[0], ctx = _ref1[1], imgd = _ref1[2], pxs = _ref1[3];
    _ref2 = [c.width, c.height], w = _ref2[0], h = _ref2[1];
    u8 = new Uint8Array(new ArrayBuffer(pxs.length));
    y = 0;
    while (y < h) {
      x = 0;
      yw = y * w;
      while (x < w) {
        i = (yw + x) * 4;
        r = i;
        g = i + 1;
        b = i + 2;
        a = i + 3;
        if (!extended) {
          _ref3 = filter(pxs[r], pxs[g], pxs[b], pxs[a], i), u8[r] = _ref3[0], u8[g] = _ref3[1], u8[b] = _ref3[2], u8[a] = _ref3[3];
        } else {
          _ref4 = filter(pxs[r], pxs[g], pxs[b], pxs[a], i, c), u8[r] = _ref4[0], u8[g] = _ref4[1], u8[b] = _ref4[2], u8[a] = _ref4[3];
        }
        x = x + 1;
      }
      y = y + 1;
    }
    new_c = Franz.byArray(u8, w, h);
    return nb(cb, new_c);
  };

  Franz.getGrayscaleValue = getGrayscaleValue = function(r, g, b) {
    return r * 0.3 + g * 0.59 + b * 0.11;
  };

}).call(this);
