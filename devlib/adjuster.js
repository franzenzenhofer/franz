// Generated by CoffeeScript 1.3.1
(function() {
  var __slice = [].slice;

  Franz.rgbaAd = function() {
    var av, bv, c, cb, gv, p, rv, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0, 0, 0, 0), cb = _ref[0], rv = _ref[1], gv = _ref[2], bv = _ref[3], av = _ref[4];
    return Franz.rgba(c, cb, function(r, g, b, a) {
      return [clamp(a + rv), clamp(g + gv), clamp(b + bv), clamp(a + av)];
    });
  };

  Franz.adBrighter = function() {
    var c, cb, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0), cb = _ref[0], t = _ref[1];
    return Franz.rgbaAd(c, t, t, t, 0, cb);
  };

  Franz.adDarker = function() {
    var c, cb, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0), cb = _ref[0], t = _ref[1];
    return Franz.brighter(c, t * -1, cb);
  };

  Franz.adOpacity = function() {
    var c, cb, p, t, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 0), cb = _ref[0], t = _ref[1];
    return Franz.rgbaAd(c, 0, 0, 0, t, cb);
  };

  Franz.rgbaMultiply = function() {
    var av, bv, c, cb, gv, p, rv, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1, 1, 1, 1), cb = _ref[0], rv = _ref[1], gv = _ref[2], bv = _ref[3], av = _ref[4];
    return Franz.rgba(c, cb, function(r, g, b, a) {
      return [clamp(a * av), clamp(g * gv), clamp(b * bv), clamp(a * av)];
    });
  };

  Franz.brighter = function() {
    var c, cb, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], p = _ref[1];
    return Franz.rgbaMultiply(c, p, p, p, 1, cb);
  };

  Franz.darker = function() {
    var c, cb, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], p = _ref[1];
    p = 2 - p;
    return Franz.rgbaMultiply(c, p, p, p, 1, cb);
  };

  Franz.opacity = function() {
    var c, cb, o, p, _ref;
    c = arguments[0], p = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = fff(p, 1), cb = _ref[0], o = _ref[1];
    return Franz.rgbaMultiply(c, 1, 1, 1, o, cb);
  };

}).call(this);
